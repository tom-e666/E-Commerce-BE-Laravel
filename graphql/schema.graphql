#start login feature
input UserLogInput
{
  username:String
  email:String
  phone:String
  password:String!
}

interface BaseResponse {
  code: Int!
  message: String!
}

type Response implements BaseResponse {
  code: Int!
  message: String!
}

# User feature
type UserLogResponse
{
  code:String!
  token:String #JWT
  message:String
}
type UserCredential {
    id: ID
    username: String
    email: String
    phone: String
    # email_verified: Boolean
    # phone_verified: Boolean
    full_name: String
}
type UserResponse implements BaseResponse{
  code:Int!
  message:String!
  user:UserCredential
}
type AuthPayload{
  access_token:String!
  refresh_token:String!
  expires_at:Int!
}

# Cart feature
type CartItem{
  product_id:ID!
  quantity:Int!
}
type PaymentInfo{
  payment_method:String
  payment_status:String 
  transaction_id:String 
}
type PaymentResponse{
  code: Int
  message: String
  payment: PaymentInfo
}
type CartItemResponse implements BaseResponse {
  code: Int!
  message: String!
  item: CartItem
}

type CartItemsResponse implements BaseResponse {
  code: Int!
  message: String!
  items: [CartItem]!
}

# Product feature
type ProductItem{
  name:String!
  price:Float!
  stock:Int!
  status:Boolean!
  brand_id:Int!
  details: ProductDetails
}
type ProductDetails{
  description:String!
  specifications:[Specification!]!
  images:[String!]!
  keywords:[String!]!
}
type Specification{
  name:String!
  value:String!
}
input ProductDetailsInput{
  description:String!
  specifications:[SpecificationInput!]!
  images:[String!]!
  keywords:[String!]!
}
input SpecificationInput{
  name:String!
  value:String!
}
type ProductItemsResponse implements BaseResponse {
  code: Int!
  message: String!
  products: [ProductItem]!
}
type ProductItemResponse implements BaseResponse {
  code: Int!
  message: String!
  product: ProductItem
}

# Brand feature
type Brand{
  name:String
}
type BrandResponse implements BaseResponse {
  code: Int!
  message: String!
  brand: Brand
}
type BrandsResponse implements BaseResponse {
  code: Int!
  message: String!
  brands: [Brand]!
}

type Shipping{
  tracking_code: String
  carrier: String
  estimated_date: String
  status: String
}
type ShippingResponse{
  code:Int
  message:String
  shipping: [Shipping]
}
type SupportTicket{
  subject: String
  message: String
  status: String
}
type SupportTicketMessage{
  subject: String
  message: String
}
type SupportTicketResponse{
  code:Int
  message:String
  supportTicket: SupportTicket
}
type SupportTicketsResponse {
  code: Int
  message: String
  supportTickets: [SupportTicket] # Đổi từ `supportTicket` -> `supportTickets`
}

# Review feature
type Review {
    id: ID!
    product_id: String!
    user_id: String!
    rating: Int!
    comment: String
    created_at: String
    updated_at: String
}

type ReviewResponse implements BaseResponse {
    code: Int!
    message: String!
    review: Review
}

type ReviewsResponse implements BaseResponse {
    code: Int!
    message: String!
    reviews: [Review]!
}

input ReviewInput {
    product_id: String!
    rating: Int!
    comment: String
}
type checkConnectionOutput{
    code:Int
    message:String
}
# input

type Query{
    checkConnection:checkConnectionOutput @field(resolver: "AuthResolver@checkConnection")
    getPayment(order_id:String):PaymentResponse @field(resolver:"PaymentResolver@getPayment")
    getProduct(id:String!):ProductItemResponse @field(resolver:"ProductResolver@getProduct")
    getProducts(status:String):ProductItemsResponse @field(resolver:"ProductResolver@getProducts")
    getPaginatedProducts(
        brand_id: ID
        category_id: ID
        min_price: Float
        max_price: Float
        status: String
        search: String
        sort_by: String
        sort_order: String
        page: Int
        per_page: Int
    ): ProductItemsResponse @field(resolver:"ProductResolver@getPaginatedProducts")
    getShipping(order_id:String):ShippingResponse @field(resolver:"ShippingResolver@getShipping")
    getSupportTicket(id:String):SupportTicketResponse @field(resolver:"SupportTicketResolver@getSupportTicket")
    getSupportTickets(user_id: String, created_after: String, created_before: String, status: String): SupportTicketsResponse @field(resolver:"SupportTicketResolver@getSupportTickets")
    getSupportTicketResponses(ticket_id:String):SupportTicketResponse @field(resolver:"SupportTicketResolver@getSupportTicketResponses")
    getBrands: BrandsResponse @field(resolver:"BrandResolver@getBrands")
    getBrand(id:String!):BrandResponse @field(resolver:"BrandResolver@getBrand")
    getReviews(product_id: String): ReviewsResponse @field(resolver: "ReviewQuery@getReviews")
    getReview(id: String!): ReviewResponse @field(resolver: "ReviewQuery@getReview")
    getCartItems:CartItemsResponse @field(resolver:"CartItemResolver@getCartItems")
    getUserInfo:UserResponse @field(resolver:"UserCredentialResolver@getUserCredential")
}

type Mutation {
  signup(
    username:String!
    email:String!
    phone:String!
    password:String!
    full_name:String!
    ):UserResponse! @field(resolver: "AuthResolver@signup")
  login(
    email:String!,
    password:String!
  ):AuthPayload! @field(resolver: "AuthResolver@login")
  # logout(jwt:String!):Boolean!@field(resolver: "AuthResolver@logout")
  logout(refresh_token: String!):Response! @field(resolver: "AuthResolver@logout")
  # refreshToken(jwt:String!):UserLogResponse!@field(resolver: "AuthResolver@refreshToken")
  refreshToken(refresh_token:String!):AuthPayload! @field(resolver: "AuthResolver@refreshToken")
  # invalidateToken(jwt:String!):UserLogResponse! @field(resolver: "AuthResolver@invalidateToken")
  createBrand(name:String!):BrandResponse @field(resolver:"BrandResolver@createBrand")
  createProduct(
    name:String!
    price:Float!
    stock:Int!
    status:Boolean!
    brand_id:Int!
    details: ProductDetailsInput!
  ): ProductItemResponse @field(resolver:"ProductResolver@createProduct")
  updateProduct(
    id:String!
    name:String
    price:Float
    stock:Int
    status:Boolean
    brand_id:Int
    details: ProductDetailsInput
  ): ProductItemResponse @field(resolver:"ProductResolver@updateProduct")
  createReview(input: ReviewInput!): ReviewResponse @field(resolver: "ReviewMutation@createReview")
  updateReview(id: String!, input: ReviewInput!): ReviewResponse @field(resolver: "ReviewMutation@updateReview")
  deleteReview(id: String!): Response @field(resolver: "ReviewMutation@deleteReview")
  addCartItem(
    product_id:ID!
    quantity:Int!
  ):CartItemResponse @field(resolver:"CartItemResolver@updateCart")
  removeCartItem(
    product_id:ID!
  ):Response @field(resolver:"CartItemResolver@deleteItem")
  updateUserInfo(
    username:String
    email:String
    phone:String
    full_name:String
  ):UserResponse @field(resolver:"UserCredentialResolver@updateUserInfo")
  changePassword(
    old_password:String!
    new_password:String!
  ):Response @field(resolver:"UserCredentialResolver@changePassword")
}
type output{message:String}
#end login feature
