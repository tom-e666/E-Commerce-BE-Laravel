#-----------------------------------------------
# COMMON TYPES
#-----------------------------------------------
interface BaseResponse {
  code: Int!
  message: String!
}

type Response implements BaseResponse {
  code: Int!
  message: String!
}

type BaseResponseImplementation implements BaseResponse {
  code: Int!
  message: String!
}

type Query {
  checkConnection: BaseResponseImplementation @field(resolver: "AuthResolver@checkConnection")
}

#-----------------------------------------------
# AUTHENTICATION & USER FEATURE
#-----------------------------------------------
# Types
type UserCredential {
  id: ID!
  email: String
  phone: String
  full_name: String
  role: String    
  email_verified: Boolean
  created_at: String
}

type UserResponse implements BaseResponse {
  code: Int!
  message: String!
  user: UserCredential
}
type UsersResponse implements BaseResponse {
  code: Int!
  message: String!
  users: [UserCredential]
}

type UserLogResponse {
  code: String!
  token: String #JWT
  message: String
}
type AuthPayload implements BaseResponse {
  code: Int!
  message: String!
  user: UserCredential
  access_token: String
  refresh_token: String
  expires_at: Int
  role: String
  email_verified: Boolean
}
input UserLogInput {
  email: String
  phone: String
  password: String!
}

# Queries
extend type Query {
  getUserByJWT: UserResponse @field(resolver: "AuthResolver@getUserByJWT") @guard(with: ["api"])
  getUserCredential: UserResponse @field(resolver: "UserCredentialResolver@getUserCredential") @guard(with: ["api"])
  getCurrentUser: UserResponse @field(resolver: "UserCredentialResolver@getCurrentUser") @guard(with: ["api"])

getAllUsers(
    role: String
    search: String

  ): UsersResponse 
    @field(resolver: "UserCredentialResolver@getAllUsers") 
    @guard(with: ["api"]) 
 getUser(user_id: ID!): UserResponse 
    @field(resolver: "UserCredentialResolver@getUser") 
    @guard(with: ["api"])
  
}
# Mutations
extend type Mutation {
  signup(
    email: String!
    phone: String!
    password: String!
    full_name: String!
  ): UserResponse! @field(resolver: "AuthResolver@signup")
  
  login(
    email: String!
    password: String!
  ): AuthPayload! @field(resolver: "AuthResolver@login")

  logout(refresh_token: String!): Response! @field(resolver: "AuthResolver@logout")
  refreshToken(refresh_token: String!): AuthPayload! @field(resolver: "AuthResolver@refreshToken")
  resendVerificationEmail: BaseResponse @field(resolver: "UserCredentialResolver@resendVerification")

  # AUTHENTICATED USER ENDPOINTS
  # Users can update their own info
  updateUserInfo(
    email: String
    phone: String
    full_name: String
  ): UserResponse @field(resolver: "UserCredentialResolver@updateUserInfo") @guard(with: ["api"])
  
  # Users can change their own password
  changePassword(
    old_password: String!
    new_password: String!
  ): Response @field(resolver: "UserCredentialResolver@changePassword") @guard(with: ["api"])
  updateUserRole(
    user_id: ID!
    role: String!
  ): UserResponse 
    @field(resolver: "UserCredentialResolver@updateUserRole") 
    @guard(with: ["api"]) 

  deleteUser(
    user_id: ID!
  ): Response 
    @field(resolver: "UserCredentialResolver@deleteUser") 
    @guard(with: ["api"]) 

  sendVerificationEmail: Response 
    @field(resolver: "AuthResolver@sendVerificationEmail") 
    @guard(with: ["api"])
  # Verify email with token
   verifyEmail(token: String!): Response 
    @field(resolver: "AuthResolver@verifyEmail")


}

#-----------------------------------------------
# PRODUCT FEATURE
#-----------------------------------------------
# Types
type ProductItem {
  id: ID!
  name: String!
  price: Float!
  default_price: Float!
  stock: Int!
  status: Boolean!
  brand_id: ID!
  details: ProductDetails!
  weight: Float!
}

type ProductDetails {
  description: String!
  specifications: [Specification!]!
  images: [String!]!
  keywords: [String!]!
}

type Specification {
  name: String!
  value: String!
}

input ProductDetailsInput {
  description: String!
  specifications: [SpecificationInput!]!
  images: [String!]!
  keywords: [String!]!
}

input SpecificationInput {
  name: String!
  value: String!
}

type ProductItemsResponse implements BaseResponse {
  code: Int!
  message: String!
  products: [ProductItem]
}

type ProductItemResponse implements BaseResponse {
  code: Int!
  message: String!
  product: ProductItem
}

type PaginationInfo {
  total: Int!
  current_page: Int!
  per_page: Int!
  last_page: Int!
  from: Int
  to: Int
  has_more_pages: Boolean!
}

type PaginatedProductsResponse implements BaseResponse {
  code: Int!
  message: String!
  products: [ProductItem]
  pagination: PaginationInfo
}

# Queries
extend type Query {
  getProduct(id: ID!): ProductItemResponse @field(resolver: "ProductResolver@getProduct")
  getProducts(status: String): ProductItemsResponse @field(resolver: "ProductResolver@getProducts")
  getPaginatedProducts(
    search: String
    status: String
    category_id: ID
    brand_id: ID
    price_min: Float
    price_max: Float
    sort_field: String
    sort_direction: String
    page: Int
    per_page: Int
  ): PaginatedProductsResponse @field(resolver: "ProductResolver@getPaginatedProducts")
}

# Mutations
extend type Mutation {
  createProduct(
    name: String!
    price: Float!
    default_price: Float!
    stock: Int!
    status: Boolean!
    brand_id: ID!
    weight: Float!
    details: ProductDetailsInput!
  ): ProductItemResponse @field(resolver: "ProductResolver@createProduct") @guard(with: ["api"]) 
  
  updateProduct(
    id: ID!
    name: String
    price: Float
    default_price: Float
    stock: Int
    status: Boolean
    brand_id: ID
    weight: Float
    details: ProductDetailsInput
  ): ProductItemResponse @field(resolver: "ProductResolver@updateProduct") @guard(with: ["api"])

  deleteProduct(id: ID!): Response @field(resolver: "ProductResolver@deleteProduct") @guard(with: ["api"])
}

#-----------------------------------------------
# BRAND FEATURE
#-----------------------------------------------
# Types
type Brand {
  id: ID!
  name: String
}

type BrandResponse implements BaseResponse {
  code: Int!
  message: String!
  brand: Brand
}

type BrandsResponse implements BaseResponse {
  code: Int!
  message: String!
  brands: [Brand]
}

# Queries
extend type Query {
  getBrands: BrandsResponse @field(resolver: "BrandResolver@getBrands")
  getBrand(id: ID!): BrandResponse @field(resolver: "BrandResolver@getBrand")
}

# Mutations
extend type Mutation {
  createBrand(name: String!): BrandResponse @field(resolver: "BrandResolver@createBrand") @guard(with: ["api"]) 
  updateBrand(id: ID!, name: String!): BrandResponse @field(resolver: "BrandResolver@updateBrand") @guard(with: ["api"]) 
  deleteBrand(id: ID!): Response @field(resolver: "BrandResolver@deleteBrand") @guard(with: ["api"])
}

#-----------------------------------------------
# CART FEATURE
#-----------------------------------------------
# Types
type CartItem {
  id: ID!
  quantity: Int!
  product: CartProductDetails
}

type CartProductDetails {
  product_id: ID!
  name: String!
  price: Float!
  image: String  
  stock: Int!    
  status: Boolean!
}

type CartItemResponse implements BaseResponse {
  code: Int!
  message: String!
  item: CartItem
}

type CartItemsResponse implements BaseResponse {
  code: Int!
  message: String!
  cart_items: [CartItem]
}

type PaginatedCartItemsResponse implements BaseResponse {
  code: Int!
  message: String!
  cart_items: [CartItem]
  pagination: PaginationInfo
}

type CartSummaryResponse implements BaseResponse {
  code: Int!
  message: String!
  total_items: Int!
  subtotal: Float!
  item_count: Int!
}

# Queries
extend type Query {

  getCartItems(
    user_id: ID
  ): CartItemsResponse @field(resolver: "CartItemResolver@getCartItems") @guard(with: ["api"])

  getPaginatedCartItems(
    user_id: ID
    page: Int
    per_page: Int
    sort_field: String
    sort_direction: String
  ): PaginatedCartItemsResponse @field(resolver: "CartItemResolver@getPaginatedCartItems") @guard(with: ["api"])

  getCartSummary(
    user_id: ID
  ): CartSummaryResponse @field(resolver: "CartItemResolver@getCartSummary") @guard(with: ["api"])
}
# Mutations
extend type Mutation {
  addCartItem(
    product_id: ID!
    quantity: Int!
  ): BaseResponseImplementation @field(resolver: "CartItemResolver@updateCart") @guard(with: ["api"])
    
  removeCartItem(
    product_id: ID!
  ): BaseResponseImplementation @field(resolver: "CartItemResolver@deleteCartItem") @guard(with: ["api"])
  clearCart: BaseResponseImplementation @field(resolver: "CartItemResolver@clearCart") @guard(with: ["api"])

}

#-----------------------------------------------
# ORDER FEATURE
#-----------------------------------------------
# Types
interface Order { # Changed from 'type Order' to 'interface Order'
  id: ID!
  user_id: ID!
  status: OrderStatus!
  created_at: String!
  total_price: Float!
  items: [OrderItemDetails!]
}

type OrderItemDetails {
  id: ID!
  product_id: ID!
  name: String
  price: Float!
  image: String
  quantity: Int!
}

type OrderResult implements Order{
  id: ID!
  user_id: ID!
  status: OrderStatus!
  created_at: String!
  total_price: Float!
  items: [OrderItemDetails!]
  payment_status: PaymentStatusEnum!
  shipping_address: String
}

input OrderItemInput {
  product_id: ID!
  quantity: Int!
  # shipping_address: String!
}

enum OrderStatus {
  pending @enum(value: "pending")
  confirmed @enum(value: "confirmed")
  processing @enum(value: "processing")
  shipping @enum(value: "shipping")
  completed @enum(value: "completed")
  cancelled @enum(value: "cancelled")
  failed @enum(value: "failed")
}
enum PaymentStatusEnum {
  pending @enum(value: "pending")
  completed @enum(value: "completed")     
  cod @enum(value: "cod")                
  failed @enum(value: "failed")
  refunded @enum(value: "refunded")
}
enum ShippingStatusEnum {
  pending @enum(value: "pending")
  delivering @enum(value: "delivering")
  delivered @enum(value: "delivered")
  failed @enum(value: "failed")
}

type OrderResponse implements BaseResponse {
  code: Int!
  message: String!
  order: OrderResult
}

type OrdersResponse implements BaseResponse {
  code: Int!
  message: String!
  orders: [OrderResult]
}

type PaginatedOrdersResponse implements BaseResponse {
  code: Int!
  message: String!
  orders: [OrderResult]
  pagination: PaginationInfo
}

# Queries
extend type Query {
  getOrder(order_id: ID!): OrderResponse! @field(resolver: "OrderResolver@getOrder") @guard(with: ["api"])

  # ADMIN/STAFF: Can view and filter all orders
  getAllOrders(
    user_id: ID,
    status: String,
    created_after: String,
    created_before: String
  ): OrdersResponse!
    @field(resolver: "OrderResolver@getAllOrders")
    @guard(with: ["api"])

  # ADMIN/STAFF: Get paginated orders with filters and sorting
  getPaginatedOrders(
    user_id: ID
    status: String
    created_after: String
    created_before: String
    search: String
    sort_field: String
    sort_direction: String
    page: Int
    per_page: Int
  ): PaginatedOrdersResponse
    @field(resolver: "OrderResolver@getPaginatedOrders")
    @guard(with: ["api"])

  # USER: Get own orders (non-paginated)
  getUserOrders: OrdersResponse @field(resolver: "OrderResolver@getUserOrders") @guard(with: ["api"])

  # USER: Get own orders with pagination
  getPaginatedUserOrders(
    status: String
    created_after: String
    created_before: String
    sort_field: String
    sort_direction: String
    page: Int
    per_page: Int
  ): PaginatedOrdersResponse @field(resolver: "OrderResolver@getPaginatedUserOrders") @guard(with: ["api"])

  getStatusOrder(order_id: ID!): OrderResponse @field(resolver: "OrderResolver@getStatusOrder") @guard(with: ["api"])
  getOrderByTransaction(transaction_id: String!): OrderResponse @field(resolver: "OrderResolver@getOrderByTransaction") @guard(with: ["api"])
}

# Mutations
extend type Mutation {
  createOrder(
    typeOrder: String
    shipping_address: String
    items: [OrderItemInput!]!
  ): OrderResponse!
    @field(resolver: "OrderResolver@createOrder")
    @guard(with: ["api"])

  createOrderFromCart: OrderResponse!
    @field(resolver: "OrderResolver@createOrderFromCart")
    @guard(with: ["api"])
  
  # Add missing confirmOrder mutation
  confirmOrder(order_id: ID!): OrderResponse!
    @field(resolver: "OrderResolver@confirmOrder")
    @guard(with: ["api"])
  
  cancelOrder(order_id: ID!): OrderResponse!
    @field(resolver: "OrderResolver@cancelOrder")
    @guard(with: ["api"])

  processingOrder(order_id: ID!): OrderResponse!
    @field(resolver: "OrderResolver@processingOrder")
    @guard(with: ["api"])

  shipOrder(order_id: ID!): OrderResponse!
    @field(resolver: "OrderResolver@shipOrder")
    @guard(with: ["api"])

  # Change to completeDelivery to match resolver
  completeDelivery(order_id: ID!): OrderResponse!
    @field(resolver: "OrderResolver@completeDelivery") 
    @guard(with: ["api"])

  # Add missing updateOrder mutation
  updateOrder(
    order_id: ID!
    status: String
    total_price: Float
  ): OrderResponse!
    @field(resolver: "OrderResolver@updateOrder")
    @guard(with: ["api"])

  # Add missing deleteOrder mutation  
  deleteOrder(
    order_id: ID!
    user_id: ID!
  ): BaseResponseImplementation!
    @field(resolver: "OrderResolver@deleteOrder")
    @guard(with: ["api"])

  # Add missing createOrderItem mutation
  createOrderItem(
    order_id: ID!
    product_id: ID!
    quantity: Int!
    price: Float!
  ): BaseResponseImplementation!
    @field(resolver: "OrderResolver@createOrderItem")
    @guard(with: ["api"])

  updateOrderItem(
    order_item_id: ID!
    quantity: Int!
  ): BaseResponseImplementation! 
    @field(resolver: "OrderResolver@updateOrderItem")
    @guard(with: ["api"])
  
  deleteOrderItem(
    order_item_id: ID!
  ): BaseResponseImplementation!
    @field(resolver: "OrderResolver@deleteOrderItem")
    @guard(with: ["api"])
}

#-----------------------------------------------
# PAYMENT FEATURE
#-----------------------------------------------
# Types
type Payment{
  id: ID!
  order_id: ID!
  amount: Float!
  payment_method: String!
  payment_status: PaymentStatusEnum!
  created_at: String!
  payment_time: String!
  transaction_id: String
}

type PaymentResponse implements BaseResponse {
  code: Int!
  message: String!
  payment: Payment
}
type PaymentsResponse implements BaseResponse {
  code: Int!
  message: String!
  payments: [Payment]
}

type PaymentCodResponse implements BaseResponse {
  code: Int!
  message: String!
  transaction_id: String
}

type PaymentZalopayResponse implements BaseResponse {
  code: Int!
  message: String!
  payment_url: String,
  transaction_id: String
}

type VNPayResponse {
  code: Int!
  message: String!
  payment_url: String!
}

type IPNResponse{
  transaction_id: String
  order_id: String
}

type VNPayIPNResponse implements BaseResponse {
  code: Int!
  message: String!
  data: IPNResponse
}

input VNPayIPNInput {
    vnp_ResponseCode: String!
    vnp_TxnRef: String!
    vnp_Amount: String!
    vnp_TransactionNo: String
    vnp_BankCode: String
    vnp_PayDate: String
    vnp_SecureHash: String!
}

# Mutations
extend type Mutation {
  # USER: Can create payment for own orders
  # ADMIN/STAFF: Can create payment for any order
  createPaymentZalopay(
    order_id: String!
  ): PaymentZalopayResponse @field(resolver: "PaymentResolver@createPaymentZalopay") @guard(with: ["api"])
  
  createPaymentVNPay(
    order_id: String!
    order_type: String!
    bank_code: String!
    locale: String
  ): VNPayResponse @field(resolver: "PaymentResolver@createPaymentVNPay") @guard(with: ["api"])

  vnpayIPN(input: VNPayIPNInput): VNPayIPNResponse @field(resolver: "PaymentResolver@vnpayIPN")

  createPaymentCOD(
    order_id: String!
  ): PaymentCodResponse @field(resolver: "PaymentResolver@createPaymentCOD") @guard(with: ["api"])
}

# Queries
extend type Query {
  # USER: Can view payment for own orders
  # ADMIN/STAFF: Can view payment for any order
  getPayment(order_id: String): PaymentResponse @field(resolver: "PaymentResolver@getPayment") @guard(with: ["api"])

   getAllPayments(
    user_id: ID
    status: String
    created_after: String
    created_before: String
  ): PaymentsResponse 
    @field(resolver: "PaymentResolver@getAllPayments") 
    @guard(with: ["api"]) 
}
#-----------------------------------------------
# SHIPPING FEATURE
#-----------------------------------------------
type Shipping {
  id: ID!
  order_id: ID!
  estimated_date: String
  status: ShippingStatusEnum!
  address: String!
  recipient_name: String!
  recipient_phone: String!
  note: String
  ghn_order_code: String
  province_name: String
  district_name: String
  ward_name: String
  shipping_fee: Float
  expected_delivery_time: String
  created_at: String!
  updated_at: String!
  shipping_method: String!
}

type Province {
  ProvinceID: ID!
  ProvinceName: String!
}

type District {
  DistrictID: ID!
  DistrictName: String!
}

type Ward {
  WardCode: String!
  WardName: String!
}

type ShippingFeeResponse {
  code: Int!
  message: String!
  fee: Float
  expected_delivery_time: String
}

type ProvinceResponse {
  code: Int!
  message: String!
  provinces: [Province]
}

type DistrictResponse {
  code: Int!
  message: String!
  districts: [District]
}

type WardResponse {
  code: Int!
  message: String!
  wards: [Ward]
}

type ShippingResponse implements BaseResponse {
  code: Int!
  message: String!
  shipping: Shipping
}
type ShippingsResponse implements BaseResponse {
  code: Int!
  message: String!
  shippings: [Shipping]
}

extend type Query {
  # PUBLIC ENDPOINTS - Location data for shipping calculations
  getProvinces: ProvinceResponse! @field(resolver: "ShippingResolver@getProvinces")
  getDistricts(province_id: ID!): DistrictResponse! @field(resolver: "ShippingResolver@getDistricts")
  getWards(district_id: ID!): WardResponse! @field(resolver: "ShippingResolver@getWards")
  
  # PUBLIC ENDPOINT - Calculate shipping fee before order
  calculateShippingFee(
    to_district_id: ID!
    to_ward_code: String!
    weight: Int!
    value: Int
  ): ShippingFeeResponse! @field(resolver: "ShippingResolver@calculateShippingFee")
  
  # USER: Can view shipping for own orders
  # ADMIN/STAFF: Can view shipping for any order
  getShippingByOrderId(order_id: ID!): ShippingResponse! @field(resolver: "ShippingResolver@getShippingByOrderId") @guard(with: ["api"])

  getAllShippings(status: String): ShippingsResponse! 
    @field(resolver: "ShippingResolver@getShippings") 
    @guard(with: ["api"]) 
}

extend type Mutation {
  # USER: Can create shipping for own orders
  # ADMIN/STAFF: Can create shipping for any order
  createShipping(
    order_id: ID!
    province_name: String!
    district_name: String!
    ward_name: String!
    address: String!
    recipient_name: String
    recipient_phone: String
    note: String
    shipping_method: String!
  ): ShippingResponse! @field(resolver: "ShippingResolver@createShipping") @guard(with: ["api"])
  
  updateShipping(
    shipping_id: ID!
    province_name: String
    district_name: String
    ward_name: String
    address: String
    recipient_name: String
    recipient_phone: String
    note: String
  ): ShippingResponse! @field(resolver: "ShippingResolver@updateShipping") @guard(with: ["api"])
  
  updateShippingStatus(
    shipping_id: ID!
    status: ShippingStatusEnum!
  ): ShippingResponse! 
    @field(resolver: "ShippingResolver@updateShippingStatus") 
    @guard(with: ["api"]) 
  
  cancelShipping(shipping_id: ID!): BaseResponseImplementation! @field(resolver: "ShippingResolver@cancelShipping") @guard(with: ["api"])
  
}

#-----------------------------------------------
# SUPPORT TICKET FEATURE
#-----------------------------------------------
# Types
type SupportTicket {
  id: ID!
  subject: String
  message: String
  status: String
  user_id: ID!
  created_at: String
  responses: [SupportTicketResponseType]
}

type SupportTicketResponseType {
  id: ID!
  subject: String
  message: String
  ticket_id: ID!
  user_id: ID!
  created_at: String
  user: UserCredential
}

type SupportTicketResponse implements BaseResponse {
  code: Int!
  message: String!
  supportTicket: SupportTicket
}

type SupportTicketsResponse implements BaseResponse {
  code: Int!
  message: String!
  supportTickets: [SupportTicket]
}

type SupportTicketResponsesResponse implements BaseResponse {
  code: Int!
  message: String!
  supportTicketResponses: [SupportTicketResponseType]
}

type SingleSupportTicketResponseResponse implements BaseResponse {
  code: Int!
  message: String!
  supportTicketResponse: SupportTicketResponseType
}

# Queries
extend type Query {
  # USER: Can view own support tickets
  # ADMIN/STAFF: Can view any support ticket
  getSupportTicket(id: ID!): SupportTicketResponse @field(resolver: "SupportTicketResolver@getSupportTicket") @guard(with: ["api"])
  
  # USER: Can view own support tickets only
  # ADMIN/STAFF: Can view all tickets and filter by user_id/status
  getSupportTickets(
    user_id: ID, 
    created_after: String, 
    created_before: String, 
    status: String
  ): SupportTicketsResponse @field(resolver: "SupportTicketResolver@getSupportTickets") @guard(with: ["api"])
  
  # USER: Can view responses to own tickets
  # ADMIN/STAFF: Can view responses to any ticket
  getSupportTicketResponses(ticket_id: ID!): SupportTicketResponsesResponse @field(resolver: "SupportTicketResolver@getSupportTicketResponses") @guard(with: ["api"])
}

# Mutations
extend type Mutation {
  # AUTHENTICATED USER: Can create support tickets
  createSupportTicket(
    subject: String!
    message: String!
  ): SupportTicketResponse @field(resolver: "SupportTicketResolver@createSupportTicket") @guard(with: ["api"])
  
  # USER: Can update own tickets
  # ADMIN/STAFF: Can update any ticket status
  updateSupportTicket(
    id: ID!
    subject: String
    message: String
    status: String
  ): SupportTicketResponse @field(resolver: "SupportTicketResolver@updateSupportTicket") @guard(with: ["api"])
  
  # USER: Can delete own tickets
  # ADMIN/STAFF: Can delete any ticket
  deleteSupportTicket(
    id: ID!
  ): Response @field(resolver: "SupportTicketResolver@deleteSupportTicket") @guard(with: ["api"])
  
  # USER: Can respond to own tickets
  # ADMIN/STAFF: Can respond to any ticket
  createSupportTicketResponse(
    ticket_id: ID!
    subject: String
    message: String!
  ): SingleSupportTicketResponseResponse @field(resolver: "SupportTicketResolver@createSupportTicketResponse") @guard(with: ["api"])
  
  # USER: Can update their own responses
  # ADMIN/STAFF: Can update any response
  updateSupportTicketResponse(
    id: ID!
    subject: String
    message: String
  ): SingleSupportTicketResponseResponse @field(resolver: "SupportTicketResolver@updateSupportTicketResponse") @guard(with: ["api"])
  
  # USER: Can delete their own responses
  # ADMIN/STAFF: Can delete any response
  deleteSupportTicketResponse(
    id: ID!
  ): Response @field(resolver: "SupportTicketResolver@deleteSupportTicketResponse") @guard(with: ["api"])
}

#-----------------------------------------------
# REVIEW FEATURE
#-----------------------------------------------
# Types
type ProductReview{
  id: ID
  name: String
  image: String
}
type UserReview{
  id: ID
  username: String
}
type Review {
  id: ID!
  product: ProductReview!
  user_id: ID
  user: UserReview
  rating: Int!
  comment: String
  created_at: String
  updated_at: String
}

type ReviewResponse implements BaseResponse {
  code: Int!
  message: String!
  review: Review
}

type ReviewsResponse implements BaseResponse {
  code: Int!
  message: String!
  reviews: [Review]
  total: Int!
}

# Queries
extend type Query {
  # USER: Can view own reviews
  # ADMIN/STAFF: Can view all user reviews
  getUserReviews: ReviewsResponse 
    @field(resolver: "ReviewResolver@getUserReviews") 
    @guard(with: ["api"])
  
  # ADMIN/STAFF: Can get reviews filtered by user ID
  getAllReviews(user_id: ID): ReviewsResponse 
    @field(resolver: "ReviewResolver@getAllReviews") 
    @guard(with: ["api"]) 
  
  # PUBLIC ENDPOINT - View product reviews
  getProductReviews(product_id: ID!): ReviewsResponse 
    @field(resolver: "ReviewResolver@getProductReviews")
}

# Mutations
extend type Mutation {
  createReview(
    order_item_id: ID!  
    rating: Int!
    comment: String
  ): BaseResponseImplementation 
    @field(resolver: "ReviewResolver@createReview") 
    @guard(with: ["api"])
  updateReview(
    review_id: ID!
    rating: Int
    comment: String
  ): BaseResponseImplementation 
    @field(resolver: "ReviewResolver@updateReview") 
    @guard(with: ["api"])

  deleteReview(
    review_id: ID!
  ): BaseResponseImplementation 
    @field(resolver: "ReviewResolver@deleteReview") 
    @guard(with: ["api"])
}


#-----------------------------------------------
# METRICS FEATURE (ADMIN)
#-----------------------------------------------

# Types
type SalesMetric {
  date: String!
  revenue: Float!
  orders_count: Int!
  average_order_value: Float!
}

type ProductMetric {
  id: ID!
  name: String!
  sales_count: Int!
  revenue: Float!
  stock_remaining: Int!
  stock_percentage: Float!
}

type UserMetric {
  new_users_count: Int!
  active_users_count: Int!
  conversion_rate: Float!
}

type SupportMetric {
  open_tickets: Int!
  in_progress_tickets: Int!
  resolved_tickets: Int!
  average_resolution_time: Float! # In hours
}

type AdminDashboardResponse implements BaseResponse {
  code: Int!
  message: String!
  orders_today: Int
  orders_week: Int
  orders_month: Int
  revenue_today: Float
  revenue_week: Float
  revenue_month: Float
  total_products: Int
  low_stock_products: Int
  out_of_stock_products: Int
  total_users: Int
  new_users_today: Int
  new_users_week: Int
  support_tickets_open: Int
  support_tickets_total: Int
}

type SalesMetricsResponse implements BaseResponse {
  code: Int!
  message: String!
  daily_metrics: [SalesMetric]
  weekly_metrics: [SalesMetric]
  monthly_metrics: [SalesMetric]
}

type TopProductsResponse implements BaseResponse {
  code: Int!
  message: String!
  top_selling_products: [ProductMetric]
  low_stock_products: [ProductMetric]
}

type MetricsResponse implements BaseResponse {
  code: Int!
  message: String!
  open_tickets: String
  in_progress_tickets: String
  resolved_tickets: String
  average_resolution_time: String
}

# Queries
extend type Query {
  # Admin dashboard overview
  getAdminDashboardMetrics: AdminDashboardResponse 
    @field(resolver: "MetricsResolver@getDashboardMetrics") 
    @guard(with: ["api"]) 

  # Detailed sales metrics with timeframe
  getSalesMetrics(timeframe: String!, start_date: String, end_date: String): SalesMetricsResponse 
    @field(resolver: "MetricsResolver@getSalesMetrics") 
    @guard(with: ["api"]) 

  # Top selling and low stock products  
  getProductMetrics(limit: Int): TopProductsResponse 
    @field(resolver: "MetricsResolver@getProductMetrics") 
    @guard(with: ["api"]) 

  # Support ticket analytics
  getSupportMetrics: MetricsResponse 
    @field(resolver: "MetricsResolver@getSupportMetrics") 
    @guard(with: ["api"]) 
}
#-----------------------------------------------
# Search FEATURE
#-----------------------------------------------
type SearchMetadata {
  original_query: String!
  interpreted_query: String
  processing_time_ms: Int
}

type SmartSearchResponse implements BaseResponse {
  code: Int!
  message: String!
  products: [ProductItem]  # Changed from results: [SearchResult]
  total: Int!
  filters: SearchFilters
  metadata: SearchMetadata
}

type SearchFilters {
  brands: [FilterOption]
  categories: [FilterOption]
  price_range: PriceRange
}

type FilterOption {
  id: ID!
  name: String!
  count: Int!
}

type PriceRange {
  min: Float!
  max: Float!
}

extend type Query {
  # Natural language search using Gemini API
  smartSearch(
    query: String!
  ): SmartSearchResponse @field(resolver: "SearchResolver@smartSearch")
}

  extend type Mutation {
    forgotPassword(
      email: String!
    ): Response @field(resolver: "AuthResolver@forgotPassword")
    
    resetPassword(
      user_id: ID!
      token: String!
      password: String!
      password_confirmation: String!
    ): Response @field(resolver: "AuthResolver@resetPassword")
    
    verifyPasswordResetToken(
      user_id: ID!
      token: String!
    ): Response @field(resolver: "AuthResolver@verifyPasswordResetToken")
  }